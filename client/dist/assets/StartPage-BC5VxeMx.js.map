{"version":3,"file":"StartPage-BC5VxeMx.js","sources":["../../src/utils/formatTime.js","../../src/page/cbt/student/start/Header.jsx","../../src/page/cbt/student/start/components/Navigation.jsx","../../src/page/cbt/student/start/components/QuestionCard.jsx","../../src/page/cbt/student/start/components/AnswerCard.jsx","../../src/page/cbt/student/start/components/QuestionNumbers.jsx","../../src/page/cbt/student/start/Body.jsx","../../src/page/cbt/student/start/StartPage.jsx"],"sourcesContent":["export const formatTime = (seconds) => {\r\n  if (!seconds && seconds !== 0) return \"--:--:--\";\r\n\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const remainingSeconds = seconds % 60;\r\n\r\n  return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(\r\n    2,\r\n    \"0\"\r\n  )}:${String(remainingSeconds).padStart(2, \"0\")}`;\r\n};\r\n","import React from \"react\";\r\nimport { formatTime } from \"../../../../utils/formatTime\";\r\n\r\nconst Header = ({ name, user, examid, timeLeft, isExamStarted }) => {\r\n  return (\r\n    <div className='container-fluid bg-primary text-white'>\r\n      <div className='container p-2'>\r\n        <div className='d-flex justify-content-between align-items-center'>\r\n          <div>\r\n            <h4 className='card-title mb-0'>{name.replace(/-/g, \" \")}</h4>\r\n            <small>\r\n              Nama: {user.name} | Kelas: {user.class}\r\n            </small>\r\n          </div>\r\n          <div className='d-flex align-items-center gap-3'>\r\n            {isExamStarted && (\r\n              <div className='h3 m-0'>{formatTime(timeLeft)}</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Navigation = ({\r\n  currentPage,\r\n  questionsLength,\r\n  isLoading,\r\n  onPrevious,\r\n  onNext,\r\n  onReset,\r\n  onFinish,\r\n  questionsData,\r\n  answers,\r\n}) => {\r\n  // Check if all questions are answered\r\n  const isAllAnswered = () => {\r\n    return questionsData.every((question) => {\r\n      const savedAnswer = answers[question.id];\r\n      return question.qtype === 2\r\n        ? Boolean(savedAnswer?.essay && savedAnswer.essay.trim() !== \"\")\r\n        : Boolean(savedAnswer?.mc);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='d-flex justify-content-between mb-2'>\r\n      <div className='btn-group'>\r\n        <button\r\n          className='btn btn-sm btn-primary'\r\n          onClick={onPrevious}\r\n          disabled={currentPage === 1 || isLoading}>\r\n          <i className='bi bi-chevron-double-left'></i>\r\n        </button>\r\n\r\n        <button className='btn btn-sm btn-outline-primary' disabled={true}>\r\n          {`Pertanyaan No ${currentPage}`}\r\n        </button>\r\n\r\n        <button\r\n          className='btn btn-sm btn-primary'\r\n          onClick={onNext}\r\n          disabled={currentPage === questionsLength || isLoading}>\r\n          <i className='bi bi-chevron-double-right'></i>\r\n        </button>\r\n      </div>\r\n\r\n      <div className='btn-group'>\r\n        <button\r\n          className='btn btn-sm btn-warning'\r\n          onClick={onReset}\r\n          disabled={isLoading}>\r\n          <i className='bi bi-recycle'></i> Sync\r\n        </button>\r\n        <button\r\n          className='btn btn-sm btn-danger'\r\n          onClick={onFinish}\r\n          disabled={!isAllAnswered()}\r\n          title={\r\n            !isAllAnswered()\r\n              ? \"Semua pertanyaan harus dijawab\"\r\n              : \"Selesaikan ujian\"\r\n          }>\r\n          <i className='bi bi-check-circle'></i> Selesaikan Ujian\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\n\r\nconst createHtml = (html) => {\r\n  return { __html: html };\r\n};\r\n\r\nconst QuestionCard = ({ question }) => {\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-body'>\r\n        <p\r\n          className='card-text'\r\n          dangerouslySetInnerHTML={createHtml(question)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import React from \"react\";\r\n\r\nconst createHtml = (html) => {\r\n  return { __html: html };\r\n};\r\n\r\nconst AnswerCard = ({\r\n  currentQuestion,\r\n  answers,\r\n  essay,\r\n  setEssay,\r\n  currentPage,\r\n  handleSubmit,\r\n  isLoadingAnswer,\r\n}) => {\r\n  const renderAnswerOptions = () => {\r\n    if (!currentQuestion) return null;\r\n\r\n    // If qtype is 2, show textarea\r\n    if (currentQuestion.qtype === 2) {\r\n      const savedEssay = answers[currentQuestion.id]?.essay || \"\";\r\n      return (\r\n        <div className=\"answer-options\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            rows=\"4\"\r\n            placeholder=\"Ketikkan jawabanmu disini...\"\r\n            value={essay}\r\n            onChange={(e) => setEssay(e.target.value)}\r\n            onBlur={() => handleSubmit()}\r\n          ></textarea>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // For other question types, show options\r\n    return (\r\n      <div className=\"d-flex flex-column gap-2\">\r\n        {currentQuestion.choices &&\r\n          currentQuestion.choices.map((choice, index) => {\r\n            // Improved check for selected answer\r\n            const savedAnswer = answers[currentQuestion.id]?.mc;\r\n            const isSelected = savedAnswer && savedAnswer === choice.key;\r\n\r\n            return (\r\n              <div key={index} className=\"form-check\">\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"radio\"\r\n                  name={`question-${currentPage}`}\r\n                  id={`option-${choice.key}`}\r\n                  value={choice.key}\r\n                  checked={isSelected}\r\n                  onChange={(e) => handleSubmit(e.target.value)}\r\n                />\r\n                <label\r\n                  className=\"form-check-label pointer\"\r\n                  htmlFor={`option-${choice.key}`}\r\n                >\r\n                  <span dangerouslySetInnerHTML={createHtml(choice.text)} />\r\n                </label>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        {isLoadingAnswer ? (\r\n          <div className=\"text-center\">\r\n            <div className=\"spinner-border text-primary\" role=\"status\">\r\n              <span className=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          renderAnswerOptions()\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswerCard;\r\n","import React from \"react\";\r\n\r\nconst QuestionNumbers = ({\r\n  questionsData,\r\n  currentPage,\r\n  answers,\r\n  isLoading,\r\n  onQuestionNumberClick,\r\n}) => {\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-body'>\r\n        <div className='d-flex justify-content-center flex-wrap gap-2'>\r\n          {questionsData.map((question, index) => {\r\n            const questionId = question?.id;\r\n            const savedAnswer = answers[questionId];\r\n\r\n            // Improved check for answered questions\r\n            const isAnswered =\r\n              question.qtype === 2\r\n                ? Boolean(savedAnswer?.essay && savedAnswer.essay.trim() !== \"\")\r\n                : Boolean(savedAnswer?.mc && savedAnswer.mc !== \"\");\r\n\r\n            return (\r\n              <button\r\n                key={index}\r\n                className={`btn btn-sm ${\r\n                  currentPage === index + 1\r\n                    ? \"btn-primary\"\r\n                    : isAnswered\r\n                    ? \"btn-danger\"\r\n                    : \"btn-outline-primary\"\r\n                }`}\r\n                onClick={() => onQuestionNumberClick(index)}\r\n                disabled={isLoading}\r\n              >\r\n                {index + 1}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionNumbers;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  useAddAnswerMutation,\r\n  useGetStudentAnswerQuery,\r\n} from \"../../../../controller/api/cbt/ApiAnswer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n// Import Components\r\nimport Navigation from \"./components/Navigation\";\r\nimport QuestionCard from \"./components/QuestionCard\";\r\nimport AnswerCard from \"./components/AnswerCard\";\r\nimport QuestionNumbers from \"./components/QuestionNumbers\";\r\n\r\nconst createHtml = (html) => {\r\n  return { __html: html };\r\n};\r\n\r\nconst Body = ({\r\n  questionsData,\r\n  currentPage,\r\n  onNext,\r\n  onPrevious,\r\n  onQuestionNumberClick,\r\n  onReset,\r\n  onFinish,\r\n}) => {\r\n  const { examid } = useParams();\r\n\r\n  // Get the current question based on currentPage\r\n  const currentQuestion = questionsData[currentPage - 1] || {};\r\n\r\n  // ANSWER\r\n  const [essay, setEssay] = useState(\"\");\r\n  const [key, setKey] = useState(\"\");\r\n  const [answers, setAnswers] = useState({});\r\n\r\n  const { user } = useSelector((state) => state.auth);\r\n  const { data: answer, isLoading: isLoadingAnswer } = useGetStudentAnswerQuery(\r\n    {\r\n      student: user.user_id,\r\n      exam: examid,\r\n    }\r\n  );\r\n  const [addAnswer, { isLoading, isSuccess, isError, reset }] =\r\n    useAddAnswerMutation();\r\n\r\n  // Load saved answers when component mounts\r\n  useEffect(() => {\r\n    if (answer) {\r\n      const savedAnswers = {};\r\n      answer.forEach((ans) => {\r\n        if (ans.question_id) {\r\n          savedAnswers[ans.question_id] = {\r\n            id: ans.id,\r\n            mc: ans.mc || null,\r\n            essay: ans.essay || null,\r\n            point: ans.point || 0,\r\n            qtype: ans.qtype,\r\n          };\r\n        }\r\n      });\r\n      setAnswers(savedAnswers);\r\n      // Set initial key if there's an answer for current question\r\n      if (currentQuestion && savedAnswers[currentQuestion.id]?.mc) {\r\n        setKey(savedAnswers[currentQuestion.id].mc);\r\n      }\r\n    }\r\n  }, [answer, currentQuestion]);\r\n\r\n  // Update key when changing questions\r\n  useEffect(() => {\r\n    if (currentQuestion && answers[currentQuestion.id]) {\r\n      if (currentQuestion.qtype === 2) {\r\n        setEssay(answers[currentQuestion.id].essay || \"\");\r\n      } else {\r\n        setKey(answers[currentQuestion.id].mc || \"\");\r\n      }\r\n    } else {\r\n      setKey(\"\");\r\n      setEssay(\"\");\r\n    }\r\n  }, [currentQuestion, answers]);\r\n\r\n  const handleSubmit = async (selectedKey = null) => {\r\n    if (!currentQuestion) return;\r\n\r\n    // For essay questions, use the essay state value\r\n    // For multiple choice, use the selected key\r\n    const answerValue = currentQuestion.qtype === 2 ? essay : selectedKey;\r\n\r\n    // Don't submit if essay is empty\r\n    if (currentQuestion.qtype === 2 && !answerValue) return;\r\n\r\n    const data = {\r\n      id: answers[currentQuestion.id]?.id || null,\r\n      student: user.user_id,\r\n      exam: examid,\r\n      question: currentQuestion.id,\r\n      mc: currentQuestion.qtype === 2 ? null : answerValue,\r\n      essay: currentQuestion.qtype === 2 ? answerValue : null,\r\n    };\r\n\r\n    toast.promise(\r\n      addAnswer(data)\r\n        .unwrap()\r\n        .then((res) => {\r\n          // Update the answer ID in the local state\r\n          if (res.id) {\r\n            setAnswers((prev) => ({\r\n              ...prev,\r\n              [currentQuestion.id]: {\r\n                ...prev[currentQuestion.id],\r\n                id: res.id,\r\n                mc: currentQuestion.qtype === 2 ? null : answerValue,\r\n                essay: currentQuestion.qtype === 2 ? answerValue : null,\r\n              },\r\n            }));\r\n          }\r\n          return res.message;\r\n        }),\r\n      {\r\n        loading: \"Meyimpan data...\",\r\n        success: (message) => message,\r\n        error: (error) => error.data.message,\r\n      }\r\n    );\r\n  };\r\n\r\n  // Auto-save answer when moving to next question\r\n  const handleNext = async () => {\r\n    if (currentQuestion.qtype === 2 && essay) {\r\n      await handleSubmit();\r\n    }\r\n    onNext();\r\n  };\r\n\r\n  const handlePrevious = async () => {\r\n    if (currentQuestion.qtype === 2 && essay) {\r\n      await handleSubmit();\r\n    }\r\n    onPrevious();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isError) {\r\n      reset();\r\n    }\r\n\r\n    if (isSuccess) {\r\n      reset();\r\n    }\r\n  }, [isError, reset, isSuccess]);\r\n\r\n  return (\r\n    <div className=\"container-fluid mt-2\">\r\n      <Navigation\r\n        currentPage={currentPage}\r\n        questionsLength={questionsData.length}\r\n        isLoading={isLoading}\r\n        onPrevious={handlePrevious}\r\n        onNext={handleNext}\r\n        onReset={onReset}\r\n        onFinish={onFinish}\r\n        questionsData={questionsData}\r\n        answers={answers}\r\n      />\r\n\r\n      <div className=\"row g-2\">\r\n        {/* Question Column */}\r\n        <div className=\"col-lg-5 col-12\">\r\n          <QuestionCard question={currentQuestion.question} />\r\n        </div>\r\n\r\n        {/* Answer Column */}\r\n        <div className=\"col-lg-5 col-12\">\r\n          <AnswerCard\r\n            currentQuestion={currentQuestion}\r\n            answers={answers}\r\n            essay={essay}\r\n            setEssay={setEssay}\r\n            currentPage={currentPage}\r\n            handleSubmit={handleSubmit}\r\n            isLoadingAnswer={isLoadingAnswer}\r\n          />\r\n        </div>\r\n\r\n        {/* Question Numbers Column */}\r\n        <div className=\"col-lg-2 col-12\">\r\n          <QuestionNumbers\r\n            questionsData={questionsData}\r\n            currentPage={currentPage}\r\n            answers={answers}\r\n            isLoading={isLoading}\r\n            onQuestionNumberClick={onQuestionNumberClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Body from \"./Body\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useGetExamAndQuestionsQuery } from \"../../../../controller/api/cbt/ApiExam\";\r\nimport { useFinishCbtMutation } from \"../../../../controller/api/log/ApiLog\";\r\nimport Meta from \"../../../../components/meta/Meta\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { useGetUserLogQuery } from \"../../../../controller/api/log/ApiLog\";\r\n\r\nconst StartPage = () => {\r\n  const { name, examid, token } = useParams();\r\n  const navigate = useNavigate();\r\n  const { user } = useSelector((state) => state.auth);\r\n  const {\r\n    data = {},\r\n    refetch,\r\n    isLoading,\r\n    error,\r\n  } = useGetExamAndQuestionsQuery({ examid });\r\n  const { exam, banks, questions } = data;\r\n\r\n  const [questionsData, setQuestionsData] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n  const [isExamStarted, setIsExamStarted] = useState(false);\r\n\r\n  const [finishCbt] = useFinishCbtMutation();\r\n\r\n  // Get the log data to calculate remaining time\r\n  const { data: log, error: logError } = useGetUserLogQuery(\r\n    {\r\n      exam: examid,\r\n      student: user.user_id,\r\n    },\r\n    { skip: !examid || !user.user_id }\r\n  );\r\n\r\n  // Check if user has access to this exam\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error(\"Anda tidak memiliki akses ke ujian ini\");\r\n      navigate(\"/siswa-daftar-ujian\");\r\n    }\r\n  }, [error, navigate]);\r\n\r\n  // Check if exam has started\r\n  useEffect(() => {\r\n    if (logError) {\r\n      toast.error(\"Anda belum memulai ujian ini\");\r\n      navigate(\"/siswa-daftar-ujian\");\r\n    }\r\n  }, [logError, navigate]);\r\n\r\n  // Calculate remaining time based on log creation time\r\n  useEffect(() => {\r\n    if (log && exam && log.start_time) {\r\n      const startTime = new Date(log.start_time).getTime();\r\n      const now = new Date().getTime();\r\n      const elapsedSeconds = Math.floor((now - startTime) / 1000);\r\n      const totalDuration = exam.duration * 60; // Convert minutes to seconds\r\n      const remainingSeconds = Math.max(0, totalDuration - elapsedSeconds);\r\n\r\n      if (remainingSeconds <= 0) {\r\n        finishExam();\r\n      } else {\r\n        setTimeLeft(remainingSeconds);\r\n        setIsExamStarted(true);\r\n      }\r\n    }\r\n  }, [log, exam]);\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    if (!isExamStarted || !timeLeft) return;\r\n\r\n    const timer = setInterval(() => {\r\n      setTimeLeft((prev) => {\r\n        if (prev <= 1) {\r\n          clearInterval(timer);\r\n          finishExam();\r\n          return 0;\r\n        }\r\n        return prev - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [isExamStarted, timeLeft]);\r\n\r\n  const handleNextQuestion = () => {\r\n    if (currentPage < questionsData.length) {\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n  };\r\n\r\n  const handlePreviousQuestion = () => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  const handleQuestionNumberClick = (index) => {\r\n    setCurrentPage(index + 1);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    localStorage.removeItem(\"questions\");\r\n    refetch();\r\n\r\n    if (questions && Array.isArray(questions)) {\r\n      localStorage.setItem(\"questions\", JSON.stringify({ questions }));\r\n      setQuestionsData(questions);\r\n    }\r\n  };\r\n\r\n  const finishExam = async () => {\r\n    toast.promise(finishCbt({ id: log.id, exam: examid }).unwrap(), {\r\n      loading: \"Submitting exam...\",\r\n      success: (data) => {\r\n        toast.success(\"Exam submitted successfully\");\r\n        navigate(\"/siswa-daftar-ujian\");\r\n        return data.message || \"Exam submitted successfully\";\r\n      },\r\n      error: (err) =>\r\n        `Failed to submit exam: ${err.data?.message || err.message}`,\r\n    });\r\n  };\r\n\r\n  // Load questions effect\r\n  useEffect(() => {\r\n    if (!questions) return;\r\n\r\n    const storedQuestions = localStorage.getItem(\"questions\");\r\n\r\n    if (storedQuestions) {\r\n      try {\r\n        const parsedQuestions = JSON.parse(storedQuestions);\r\n        if (Array.isArray(parsedQuestions.questions)) {\r\n          setQuestionsData(parsedQuestions.questions);\r\n        } else {\r\n          setQuestionsData([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing stored questions:\", error);\r\n        setQuestionsData([]);\r\n      }\r\n    } else {\r\n      if (questions && Array.isArray(questions)) {\r\n        localStorage.setItem(\"questions\", JSON.stringify({ questions }));\r\n        setQuestionsData(questions);\r\n      }\r\n    }\r\n  }, [questions]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div\r\n        className='d-flex justify-content-center align-items-center'\r\n        style={{ height: \"100vh\" }}>\r\n        <div className='spinner-border text-primary' role='status'>\r\n          <span className='visually-hidden'>Loading...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\" }} className='bg-light'>\r\n      <Meta title={`Pertanyaan No ${currentPage}`} />\r\n      <Header\r\n        name={name}\r\n        user={user}\r\n        examid={examid}\r\n        timeLeft={timeLeft}\r\n        isExamStarted={isExamStarted}\r\n      />\r\n\r\n      <Body\r\n        questionsData={questionsData}\r\n        currentPage={currentPage}\r\n        onNext={handleNextQuestion}\r\n        onPrevious={handlePreviousQuestion}\r\n        onQuestionNumberClick={handleQuestionNumberClick}\r\n        onReset={handleReset}\r\n        onFinish={finishExam}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartPage;\r\n"],"names":["formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","String","padStart","Header","name","user","examid","timeLeft","isExamStarted","jsx","className","children","jsxRuntimeExports","jsxs","replace","class","Navigation","currentPage","questionsLength","isLoading","onPrevious","onNext","onReset","onFinish","questionsData","answers","isAllAnswered","every","question","savedAnswer","id","qtype","Boolean","essay","trim","mc","onClick","disabled","title","QuestionCard","dangerouslySetInnerHTML","html","__html","AnswerCard","currentQuestion","setEssay","handleSubmit","isLoadingAnswer","role","_a","rows","placeholder","value","onChange","e","target","onBlur","choices","map","choice","index","isSelected","key","type","checked","htmlFor","text","QuestionNumbers","onQuestionNumberClick","questionId","isAnswered","Body","useParams","useState","setKey","setAnswers","useSelector","state","auth","data","answer","useGetStudentAnswerQuery","student","user_id","exam","addAnswer","isSuccess","isError","reset","useAddAnswerMutation","useEffect","savedAnswers","forEach","ans","question_id","point","async","selectedKey","answerValue","c","promise","unwrap","then","res","prev","message","loading","success","error","length","StartPage","token","navigate","useNavigate","refetch","useGetExamAndQuestionsQuery","banks","questions","setQuestionsData","setCurrentPage","setTimeLeft","setIsExamStarted","finishCbt","useFinishCbtMutation","log","logError","useGetUserLogQuery","skip","toast","start_time","startTime","Date","getTime","now","elapsedSeconds","totalDuration","duration","max","finishExam","timer","setInterval","clearInterval","err","storedQuestions","localStorage","getItem","parsedQuestions","JSON","parse","Array","isArray","console","setItem","stringify","style","height","Meta","removeItem"],"mappings":"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"}